// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.aeiou.bigbang.web;

import com.aeiou.bigbang.domain.BigTag;
import com.aeiou.bigbang.domain.Content;
import com.aeiou.bigbang.domain.Message;
import com.aeiou.bigbang.domain.Remark;
import com.aeiou.bigbang.domain.Twitter;
import com.aeiou.bigbang.domain.UserAccount;
import com.aeiou.bigbang.web.UserAccountController;

import flexjson.JSONSerializer;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect UserAccountController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> UserAccountController.showJson(@PathVariable("id") Long id) {
        UserAccount userAccount = UserAccount.findUserAccount(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (userAccount == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(userAccount.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> UserAccountController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<UserAccount> result = UserAccount.findAllUserAccounts();
        return new ResponseEntity<String>(UserAccount.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> UserAccountController.createFromJson(@RequestBody String json) {
        UserAccount userAccount = UserAccount.fromJsonToUserAccount(json);
        userAccount.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> UserAccountController.createFromJsonArray(@RequestBody String json) {
    	if(json != null && json.length() > 0){
	        for (UserAccount userAccount: UserAccount.fromJsonArrayToUserAccounts(json)) {
	            userAccount.persist();
	        }
	        HttpHeaders headers = new HttpHeaders();
	        headers.add("Content-Type", "application/json");
	        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    	}
        
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        Collection<String> collection =  new ArrayList<String>();
        //useraccount
        String tUserAccountJsonAryStr = UserAccount.toJsonArray(UserAccount.findAllUserAccounts());
        collection.add(tUserAccountJsonAryStr);
        //bigtag
        String tBigTagJsonAryStr = BigTag.toJsonArray(BigTag.findAllBigTags());
        collection.add(tBigTagJsonAryStr);
        //message
        String tMessageJsonAryStr = Message.toJsonArray(Message.findAllMessages());
        collection.add(tMessageJsonAryStr);
        //bookmark
        String tBookMarkJsonAryStr = Content.toJsonArray(Content.findAllContents());
        collection.add(tBookMarkJsonAryStr);
        //blog
        String tBlogJsonAryStr = Twitter.toJsonArray(Twitter.findAllTwitters());
        collection.add(tBlogJsonAryStr);
        //remark
        String tRemarkJsonAryStr = Remark.toJsonArray(Remark.findAllRemarks());
        collection.add(tRemarkJsonAryStr);
        
        String tJsonAryStrFR = new JSONSerializer().exclude("*.class").serialize(collection);
        return new ResponseEntity<String>(tJsonAryStrFR, headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> UserAccountController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        UserAccount userAccount = UserAccount.fromJsonToUserAccount(json);
        if (userAccount.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> UserAccountController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (UserAccount userAccount: UserAccount.fromJsonArrayToUserAccounts(json)) {
            if (userAccount.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> UserAccountController.deleteFromJson(@PathVariable("id") Long id) {
        UserAccount userAccount = UserAccount.findUserAccount(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (userAccount == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        userAccount.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
