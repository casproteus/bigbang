// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.aeiou.bigbang.domain;

import com.aeiou.bigbang.domain.BigTag;
import com.aeiou.bigbang.domain.BigTagDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect BigTagDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BigTagDataOnDemand: @Component;
    
    private Random BigTagDataOnDemand.rnd = new SecureRandom();
    
    private List<BigTag> BigTagDataOnDemand.data;
    
    public BigTag BigTagDataOnDemand.getNewTransientBigTag(int index) {
        BigTag obj = new BigTag();
        setAuthority(obj, index);
        setTagName(obj, index);
        setType(obj, index);
        return obj;
    }
    
    public void BigTagDataOnDemand.setAuthority(BigTag obj, int index) {
        int authority = index;
        obj.setAuthority(authority);
    }
    
    public void BigTagDataOnDemand.setTagName(BigTag obj, int index) {
        String tagName = "tagName_" + index;
        obj.setTagName(tagName);
    }
    
    public void BigTagDataOnDemand.setType(BigTag obj, int index) {
        String type = "type_" + index;
        obj.setType(type);
    }
    
    public BigTag BigTagDataOnDemand.getSpecificBigTag(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        BigTag obj = data.get(index);
        Long id = obj.getId();
        return BigTag.findBigTag(id);
    }
    
    public BigTag BigTagDataOnDemand.getRandomBigTag() {
        init();
        BigTag obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return BigTag.findBigTag(id);
    }
    
    public boolean BigTagDataOnDemand.modifyBigTag(BigTag obj) {
        return false;
    }
    
    public void BigTagDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = BigTag.findBigTagEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'BigTag' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<BigTag>();
        for (int i = 0; i < 10; i++) {
            BigTag obj = getNewTransientBigTag(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
