// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.aeiou.bigbang.domain;

import com.aeiou.bigbang.domain.Content;
import com.aeiou.bigbang.domain.ContentDataOnDemand;
import com.aeiou.bigbang.domain.Remark;
import com.aeiou.bigbang.domain.RemarkDataOnDemand;
import com.aeiou.bigbang.domain.UserAccount;
import com.aeiou.bigbang.domain.UserAccountDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect RemarkDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RemarkDataOnDemand: @Component;
    
    private Random RemarkDataOnDemand.rnd = new SecureRandom();
    
    private List<Remark> RemarkDataOnDemand.data;
    
    @Autowired
    private UserAccountDataOnDemand RemarkDataOnDemand.userAccountDataOnDemand;
    
    @Autowired
    private ContentDataOnDemand RemarkDataOnDemand.contentDataOnDemand;
    
    public Remark RemarkDataOnDemand.getNewTransientRemark(int index) {
        Remark obj = new Remark();
        setContent(obj, index);
        setPrivilege(obj, index);
        setPublisher(obj, index);
        setRemartTime(obj, index);
        setReplyTo(obj, index);
        return obj;
    }
    
    public void RemarkDataOnDemand.setContent(Remark obj, int index) {
        String content = "content_" + index;
        obj.setContent(content);
    }
    
    public void RemarkDataOnDemand.setPrivilege(Remark obj, int index) {
        int privilege = index;
        obj.setPrivilege(privilege);
    }
    
    public void RemarkDataOnDemand.setPublisher(Remark obj, int index) {
        UserAccount publisher = userAccountDataOnDemand.getRandomUserAccount();
        obj.setPublisher(publisher);
    }
    
    public void RemarkDataOnDemand.setRemartTime(Remark obj, int index) {
        Date remartTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setRemartTime(remartTime);
    }
    
    public void RemarkDataOnDemand.setReplyTo(Remark obj, int index) {
        Content replyTo = contentDataOnDemand.getRandomContent();
        obj.setReplyTo(replyTo);
    }
    
    public Remark RemarkDataOnDemand.getSpecificRemark(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Remark obj = data.get(index);
        Long id = obj.getId();
        return Remark.findRemark(id);
    }
    
    public Remark RemarkDataOnDemand.getRandomRemark() {
        init();
        Remark obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Remark.findRemark(id);
    }
    
    public boolean RemarkDataOnDemand.modifyRemark(Remark obj) {
        return false;
    }
    
    public void RemarkDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Remark.findRemarkEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Remark' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Remark>();
        for (int i = 0; i < 10; i++) {
            Remark obj = getNewTransientRemark(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
