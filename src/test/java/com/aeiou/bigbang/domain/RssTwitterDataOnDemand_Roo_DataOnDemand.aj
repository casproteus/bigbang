// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.aeiou.bigbang.domain;

import com.aeiou.bigbang.domain.RssTwitter;
import com.aeiou.bigbang.domain.RssTwitterDataOnDemand;
import com.aeiou.bigbang.domain.Twitter;
import com.aeiou.bigbang.domain.TwitterDataOnDemand;
import com.aeiou.bigbang.domain.UserAccount;
import com.aeiou.bigbang.domain.UserAccountDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect RssTwitterDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RssTwitterDataOnDemand: @Component;
    
    private Random RssTwitterDataOnDemand.rnd = new SecureRandom();
    
    private List<RssTwitter> RssTwitterDataOnDemand.data;
    
    @Autowired
    TwitterDataOnDemand RssTwitterDataOnDemand.twitterDataOnDemand;
    
    @Autowired
    UserAccountDataOnDemand RssTwitterDataOnDemand.userAccountDataOnDemand;
    
    public RssTwitter RssTwitterDataOnDemand.getNewTransientRssTwitter(int index) {
        RssTwitter obj = new RssTwitter();
        setTwitter(obj, index);
        setUseraccount(obj, index);
        return obj;
    }
    
    public void RssTwitterDataOnDemand.setTwitter(RssTwitter obj, int index) {
        Twitter twitter = twitterDataOnDemand.getRandomTwitter();
        obj.setTwitter(twitter);
    }
    
    public void RssTwitterDataOnDemand.setUseraccount(RssTwitter obj, int index) {
        UserAccount useraccount = userAccountDataOnDemand.getRandomUserAccount();
        obj.setUseraccount(useraccount);
    }
    
    public RssTwitter RssTwitterDataOnDemand.getSpecificRssTwitter(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        RssTwitter obj = data.get(index);
        Long id = obj.getId();
        return RssTwitter.findRssTwitter(id);
    }
    
    public RssTwitter RssTwitterDataOnDemand.getRandomRssTwitter() {
        init();
        RssTwitter obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return RssTwitter.findRssTwitter(id);
    }
    
    public boolean RssTwitterDataOnDemand.modifyRssTwitter(RssTwitter obj) {
        return false;
    }
    
    public void RssTwitterDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = RssTwitter.findRssTwitterEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'RssTwitter' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<RssTwitter>();
        for (int i = 0; i < 10; i++) {
            RssTwitter obj = getNewTransientRssTwitter(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
