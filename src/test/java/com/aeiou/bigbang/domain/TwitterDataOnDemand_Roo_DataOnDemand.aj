// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.aeiou.bigbang.domain;

import com.aeiou.bigbang.domain.BigTagDataOnDemand;
import com.aeiou.bigbang.domain.Twitter;
import com.aeiou.bigbang.domain.TwitterDataOnDemand;
import com.aeiou.bigbang.domain.UserAccount;
import com.aeiou.bigbang.domain.UserAccountDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TwitterDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TwitterDataOnDemand: @Component;
    
    private Random TwitterDataOnDemand.rnd = new SecureRandom();
    
    private List<Twitter> TwitterDataOnDemand.data;
    
    @Autowired
    UserAccountDataOnDemand TwitterDataOnDemand.userAccountDataOnDemand;
    
    @Autowired
    BigTagDataOnDemand TwitterDataOnDemand.bigTagDataOnDemand;
    
    public Twitter TwitterDataOnDemand.getNewTransientTwitter(int index) {
        Twitter obj = new Twitter();
        setAuthority(obj, index);
        setLastupdate(obj, index);
        setPublisher(obj, index);
        setTwitDate(obj, index);
        setTwitent(obj, index);
        setTwtitle(obj, index);
        return obj;
    }
    
    public void TwitterDataOnDemand.setAuthority(Twitter obj, int index) {
        Integer authority = new Integer(index);
        obj.setAuthority(authority);
    }
    
    public void TwitterDataOnDemand.setLastupdate(Twitter obj, int index) {
        Date lastupdate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastupdate(lastupdate);
    }
    
    public void TwitterDataOnDemand.setPublisher(Twitter obj, int index) {
        UserAccount publisher = userAccountDataOnDemand.getRandomUserAccount();
        obj.setPublisher(publisher);
    }
    
    public void TwitterDataOnDemand.setTwitDate(Twitter obj, int index) {
        Date twitDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTwitDate(twitDate);
    }
    
    public void TwitterDataOnDemand.setTwitent(Twitter obj, int index) {
        String twitent = "twitent_" + index;
        obj.setTwitent(twitent);
    }
    
    public void TwitterDataOnDemand.setTwtitle(Twitter obj, int index) {
        String twtitle = "twtitle_" + index;
        obj.setTwtitle(twtitle);
    }
    
    public Twitter TwitterDataOnDemand.getSpecificTwitter(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Twitter obj = data.get(index);
        Long id = obj.getId();
        return Twitter.findTwitter(id);
    }
    
    public Twitter TwitterDataOnDemand.getRandomTwitter() {
        init();
        Twitter obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Twitter.findTwitter(id);
    }
    
    public boolean TwitterDataOnDemand.modifyTwitter(Twitter obj) {
        return false;
    }
    
    public void TwitterDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Twitter.findTwitterEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Twitter' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Twitter>();
        for (int i = 0; i < 10; i++) {
            Twitter obj = getNewTransientTwitter(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
